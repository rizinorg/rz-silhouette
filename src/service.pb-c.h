/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: service.proto */

#ifndef PROTOBUF_C_service_2eproto__INCLUDED
#define PROTOBUF_C_service_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Hint Hint;
typedef struct Symbol Symbol;
typedef struct SectionHash SectionHash;
typedef struct Binary Binary;
typedef struct Signature Signature;
typedef struct ShareSymbol ShareSymbol;
typedef struct ShareSection ShareSection;
typedef struct ShareBin ShareBin;
typedef struct Request Request;
typedef struct Message Message;
typedef struct MatchHints MatchHints;
typedef struct Response Response;


/* --- enums --- */

typedef enum _Route {
  ROUTE__PING = 0,
  ROUTE__BINARY = 1,
  ROUTE__SIGNATURE = 2,
  ROUTE__SHARE_BIN = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ROUTE)
} Route;
typedef enum _Status {
  STATUS__INTERNAL_ERROR = 0,
  STATUS__CLIENT_BAD_PRE_SHARED_KEY = 1,
  STATUS__CLIENT_NOT_AUTHORIZED = 2,
  STATUS__VERSION_MISMATCH = 3,
  STATUS__SHARE_WAS_SUCCESSFUL = 4,
  STATUS__MESSAGE = 5,
  STATUS__HINTS = 6,
  STATUS__SYMBOL = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STATUS)
} Status;

/* --- messages --- */

struct  Hint
{
  ProtobufCMessage base;
  /*
   * hint function arch bits
   */
  uint32_t bits;
  /*
   * hint function offset
   */
  uint64_t offset;
};
#define HINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hint__descriptor) \
    , 0, 0 }


struct  Symbol
{
  ProtobufCMessage base;
  /*
   * function name
   */
  char *name;
  /*
   * function signature `type name(type arg0)`
   */
  char *signature;
  /*
   * function calling convention
   */
  char *callconv;
  /*
   * function arch bits
   */
  uint32_t bits;
};
#define SYMBOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&symbol__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  SectionHash
{
  ProtobufCMessage base;
  /*
   * binary section size
   */
  uint32_t size;
  /*
   * binary section digest
   */
  ProtobufCBinaryData digest;
};
#define SECTION_HASH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&section_hash__descriptor) \
    , 0, {0,NULL} }


struct  Binary
{
  ProtobufCMessage base;
  /*
   * binary type
   */
  char *type;
  /*
   * binary os
   */
  char *os;
  size_t n_sections;
  SectionHash **sections;
};
#define BINARY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


struct  Signature
{
  ProtobufCMessage base;
  /*
   * architecture name
   */
  char *arch;
  /*
   * architecture bits
   */
  uint32_t bits;
  /*
   * function length
   */
  uint32_t length;
  /*
   * function digest of the masked bytes
   */
  ProtobufCBinaryData digest;
};
#define SIGNATURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&signature__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, {0,NULL} }


struct  ShareSymbol
{
  ProtobufCMessage base;
  /*
   * symbol info
   */
  Symbol *symbol;
  /*
   * symbol signature
   */
  Signature *signature;
};
#define SHARE_SYMBOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&share_symbol__descriptor) \
    , NULL, NULL }


struct  ShareSection
{
  ProtobufCMessage base;
  /*
   * binary section name
   */
  char *name;
  /*
   * binary section
   */
  SectionHash *section;
  /*
   * binary section hints
   */
  size_t n_hints;
  Hint **hints;
};
#define SHARE_SECTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&share_section__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, 0,NULL }


struct  ShareBin
{
  ProtobufCMessage base;
  /*
   * binary type
   */
  char *type;
  /*
   * binary os
   */
  char *os;
  /*
   * binary sections
   */
  size_t n_sections;
  ShareSection **sections;
  /*
   * binary symbols
   */
  size_t n_symbols;
  ShareSymbol **symbols;
};
#define SHARE_BIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&share_bin__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


struct  Request
{
  ProtobufCMessage base;
  /*
   * authorization
   */
  char *psk;
  /*
   * protocol version
   */
  uint32_t version;
  /*
   * protocol route
   */
  Route route;
  /*
   * client encoded message based on the route
   */
  ProtobufCBinaryData message;
};
#define REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, ROUTE__PING, {0,NULL} }


struct  Message
{
  ProtobufCMessage base;
  /*
   * server text
   */
  char *text;
};
#define MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  MatchHints
{
  ProtobufCMessage base;
  /*
   * matched section hints
   */
  size_t n_hints;
  Hint **hints;
};
#define MATCH_HINTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&match_hints__descriptor) \
    , 0,NULL }


struct  Response
{
  ProtobufCMessage base;
  /*
   * server status
   */
  Status status;
  /*
   * server encoded message based on the status
   */
  ProtobufCBinaryData message;
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , STATUS__INTERNAL_ERROR, {0,NULL} }


/* Hint methods */
void   hint__init
                     (Hint         *message);
size_t hint__get_packed_size
                     (const Hint   *message);
size_t hint__pack
                     (const Hint   *message,
                      uint8_t             *out);
size_t hint__pack_to_buffer
                     (const Hint   *message,
                      ProtobufCBuffer     *buffer);
Hint *
       hint__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hint__free_unpacked
                     (Hint *message,
                      ProtobufCAllocator *allocator);
/* Symbol methods */
void   symbol__init
                     (Symbol         *message);
size_t symbol__get_packed_size
                     (const Symbol   *message);
size_t symbol__pack
                     (const Symbol   *message,
                      uint8_t             *out);
size_t symbol__pack_to_buffer
                     (const Symbol   *message,
                      ProtobufCBuffer     *buffer);
Symbol *
       symbol__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   symbol__free_unpacked
                     (Symbol *message,
                      ProtobufCAllocator *allocator);
/* SectionHash methods */
void   section_hash__init
                     (SectionHash         *message);
size_t section_hash__get_packed_size
                     (const SectionHash   *message);
size_t section_hash__pack
                     (const SectionHash   *message,
                      uint8_t             *out);
size_t section_hash__pack_to_buffer
                     (const SectionHash   *message,
                      ProtobufCBuffer     *buffer);
SectionHash *
       section_hash__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   section_hash__free_unpacked
                     (SectionHash *message,
                      ProtobufCAllocator *allocator);
/* Binary methods */
void   binary__init
                     (Binary         *message);
size_t binary__get_packed_size
                     (const Binary   *message);
size_t binary__pack
                     (const Binary   *message,
                      uint8_t             *out);
size_t binary__pack_to_buffer
                     (const Binary   *message,
                      ProtobufCBuffer     *buffer);
Binary *
       binary__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary__free_unpacked
                     (Binary *message,
                      ProtobufCAllocator *allocator);
/* Signature methods */
void   signature__init
                     (Signature         *message);
size_t signature__get_packed_size
                     (const Signature   *message);
size_t signature__pack
                     (const Signature   *message,
                      uint8_t             *out);
size_t signature__pack_to_buffer
                     (const Signature   *message,
                      ProtobufCBuffer     *buffer);
Signature *
       signature__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   signature__free_unpacked
                     (Signature *message,
                      ProtobufCAllocator *allocator);
/* ShareSymbol methods */
void   share_symbol__init
                     (ShareSymbol         *message);
size_t share_symbol__get_packed_size
                     (const ShareSymbol   *message);
size_t share_symbol__pack
                     (const ShareSymbol   *message,
                      uint8_t             *out);
size_t share_symbol__pack_to_buffer
                     (const ShareSymbol   *message,
                      ProtobufCBuffer     *buffer);
ShareSymbol *
       share_symbol__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   share_symbol__free_unpacked
                     (ShareSymbol *message,
                      ProtobufCAllocator *allocator);
/* ShareSection methods */
void   share_section__init
                     (ShareSection         *message);
size_t share_section__get_packed_size
                     (const ShareSection   *message);
size_t share_section__pack
                     (const ShareSection   *message,
                      uint8_t             *out);
size_t share_section__pack_to_buffer
                     (const ShareSection   *message,
                      ProtobufCBuffer     *buffer);
ShareSection *
       share_section__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   share_section__free_unpacked
                     (ShareSection *message,
                      ProtobufCAllocator *allocator);
/* ShareBin methods */
void   share_bin__init
                     (ShareBin         *message);
size_t share_bin__get_packed_size
                     (const ShareBin   *message);
size_t share_bin__pack
                     (const ShareBin   *message,
                      uint8_t             *out);
size_t share_bin__pack_to_buffer
                     (const ShareBin   *message,
                      ProtobufCBuffer     *buffer);
ShareBin *
       share_bin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   share_bin__free_unpacked
                     (ShareBin *message,
                      ProtobufCAllocator *allocator);
/* Request methods */
void   request__init
                     (Request         *message);
size_t request__get_packed_size
                     (const Request   *message);
size_t request__pack
                     (const Request   *message,
                      uint8_t             *out);
size_t request__pack_to_buffer
                     (const Request   *message,
                      ProtobufCBuffer     *buffer);
Request *
       request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   request__free_unpacked
                     (Request *message,
                      ProtobufCAllocator *allocator);
/* Message methods */
void   message__init
                     (Message         *message);
size_t message__get_packed_size
                     (const Message   *message);
size_t message__pack
                     (const Message   *message,
                      uint8_t             *out);
size_t message__pack_to_buffer
                     (const Message   *message,
                      ProtobufCBuffer     *buffer);
Message *
       message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message__free_unpacked
                     (Message *message,
                      ProtobufCAllocator *allocator);
/* MatchHints methods */
void   match_hints__init
                     (MatchHints         *message);
size_t match_hints__get_packed_size
                     (const MatchHints   *message);
size_t match_hints__pack
                     (const MatchHints   *message,
                      uint8_t             *out);
size_t match_hints__pack_to_buffer
                     (const MatchHints   *message,
                      ProtobufCBuffer     *buffer);
MatchHints *
       match_hints__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   match_hints__free_unpacked
                     (MatchHints *message,
                      ProtobufCAllocator *allocator);
/* Response methods */
void   response__init
                     (Response         *message);
size_t response__get_packed_size
                     (const Response   *message);
size_t response__pack
                     (const Response   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const Response   *message,
                      ProtobufCBuffer     *buffer);
Response *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (Response *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Hint_Closure)
                 (const Hint *message,
                  void *closure_data);
typedef void (*Symbol_Closure)
                 (const Symbol *message,
                  void *closure_data);
typedef void (*SectionHash_Closure)
                 (const SectionHash *message,
                  void *closure_data);
typedef void (*Binary_Closure)
                 (const Binary *message,
                  void *closure_data);
typedef void (*Signature_Closure)
                 (const Signature *message,
                  void *closure_data);
typedef void (*ShareSymbol_Closure)
                 (const ShareSymbol *message,
                  void *closure_data);
typedef void (*ShareSection_Closure)
                 (const ShareSection *message,
                  void *closure_data);
typedef void (*ShareBin_Closure)
                 (const ShareBin *message,
                  void *closure_data);
typedef void (*Request_Closure)
                 (const Request *message,
                  void *closure_data);
typedef void (*Message_Closure)
                 (const Message *message,
                  void *closure_data);
typedef void (*MatchHints_Closure)
                 (const MatchHints *message,
                  void *closure_data);
typedef void (*Response_Closure)
                 (const Response *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    route__descriptor;
extern const ProtobufCEnumDescriptor    status__descriptor;
extern const ProtobufCMessageDescriptor hint__descriptor;
extern const ProtobufCMessageDescriptor symbol__descriptor;
extern const ProtobufCMessageDescriptor section_hash__descriptor;
extern const ProtobufCMessageDescriptor binary__descriptor;
extern const ProtobufCMessageDescriptor signature__descriptor;
extern const ProtobufCMessageDescriptor share_symbol__descriptor;
extern const ProtobufCMessageDescriptor share_section__descriptor;
extern const ProtobufCMessageDescriptor share_bin__descriptor;
extern const ProtobufCMessageDescriptor request__descriptor;
extern const ProtobufCMessageDescriptor message__descriptor;
extern const ProtobufCMessageDescriptor match_hints__descriptor;
extern const ProtobufCMessageDescriptor response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_service_2eproto__INCLUDED */
